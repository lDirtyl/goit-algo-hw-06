import networkx as nx
import matplotlib.pyplot as plt

# Створення графа для моделювання транспортної мережі невеликого міста
G = nx.Graph()

# Додавання вершин (зупинок) та ребер (шляхів між зупинками)
stops = ["Центральна Станція", "Проспект Парку", "Музей Історії", "Міська Ратуша", "Університет",
         "Бібліотека", "Спортивний Комплекс", "Набережна", "Площа на Східному Боці", "Старе Місто"]
G.add_nodes_from(stops)

# Додавання ребер з вагами
routes_with_weights = [("Центральна Станція", "Проспект Парку", 10), ("Центральна Станція", "Музей Історії", 8),
                       ("Центральна Станція", "Міська Ратуша", 5), ("Проспект Парку", "Університет", 4),
                       ("Музей Історії", "Університет", 2), ("Міська Ратуша", "Бібліотека", 3),
                       ("Університет", "Бібліотека", 6), ("Університет", "Спортивний Комплекс", 7),
                       ("Бібліотека", "Спортивний Комплекс", 9), ("Бібліотека", "Набережна", 3),
                       ("Спортивний Комплекс", "Набережна", 2), ("Набережна", "Площа на Східному Боці", 4),
                       ("Площа на Східному Боці", "Старе Місто", 5), ("Старе Місто", "Музей Історії", 7)]

G.add_weighted_edges_from(routes_with_weights)

# Візуалізація графа
plt.figure(figsize=(10, 8))
pos = nx.spring_layout(G, seed=42)  # Генерація позицій для вершин для красивої візуалізації
nx.draw(G, pos, with_labels=True, node_color='skyblue', node_size=2000, edge_color='k', linewidths=1, font_size=12)
edge_labels = nx.get_edge_attributes(G, 'weight')
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
plt.title("Транспортна мережа маленького міста з вагами")
plt.show()

# Застосування алгоритму Дейкстри для знаходження найкоротших шляхів
shortest_paths = {node: nx.dijkstra_path(G, source="Центральна Станція", target=node) for node in G.nodes() if node != "Центральна Станція"}

shortest_paths